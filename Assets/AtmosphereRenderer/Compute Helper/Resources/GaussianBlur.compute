#pragma kernel HorizontalPass
#pragma kernel VerticalPass

Texture2D<float4> Source;
RWTexture2D<float4> Target;
RWTexture2D<float4> HorizontalPassTexture;
StructuredBuffer<float> kernelValues;
uint width;
uint height;
int kernelSize;

int alphaBlurWeight;

[numthreads(8,8,1)]
void HorizontalPass (uint3 id : SV_DispatchThreadID)
{
	if (id.x < 0 || id.x >= width || id.y < 0 || id.y >= height) {
		return;
	}

	float4 blurred = 0;
	float4 original = Source[id.xy];
	int startX = (int)id.x - (kernelSize / 2u);

	for (int i = 0; i < kernelSize; i ++) {
		int x = min(max(0, startX + i), width - 1);
		blurred += Source[int2(x, id.y)] * kernelValues[i];
	}
	
	HorizontalPassTexture[id.xy] = float4(blurred.rgb, lerp(original.a, blurred.a, alphaBlurWeight));
}


[numthreads(8,8,1)]
void VerticalPass (uint3 id : SV_DispatchThreadID)
{
	if (id.x < 0 || id.x >= width || id.y < 0 || id.y >= height) {
		return;
	}

	float4 blurred = 0;
	float4 original = HorizontalPassTexture[id.xy];
	int startY = (int)id.y - (kernelSize / 2u);

	for (int i = 0; i < kernelSize; i ++) {
		int y = min(max(0, startY + i), height - 1);
		blurred += HorizontalPassTexture[int2(id.x, y)] * kernelValues[i];
	}

	Target[id.xy] = float4(blurred.rgb, lerp(original.a, blurred.a, alphaBlurWeight));
}