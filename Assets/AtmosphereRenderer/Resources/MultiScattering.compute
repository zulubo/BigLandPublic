#pragma kernel CSMain
#include "AtmosphereCommon.hlsl"

RWTexture2D<float3> MultiScatteringLUT;

static const int multiScatteringStepCount = 20;
static const int numSamples = 128;
uint size;

sampler2D testTex;

struct MultiScatteringResult {
	float3 luminance;
	float3 fms;
};

float3 getSphericalDir(float theta, float phi) {
	float cosPhi = cos(phi);
	float sinPhi = sin(phi);
	float cosTheta = cos(theta);
	float sinTheta = sin(theta);
	return float3(sinPhi * sinTheta, cosPhi, sinPhi * cosTheta);
}




MultiScatteringResult calculateMultiScattering(float3 origin, float3 dirToSun) {

	float3 luminanceTotal = 0;
	float3 fms = 0;
	float tot = 0;

	float goldenRatio = (1 + sqrt (5)) / 2;
	float angleIncrement = PI * 2 * goldenRatio;

	for (int j = 0; j < numSamples; j ++) {
	
		float t = float(j) / numSamples;
		float inclination = acos(1 - 2*  t);
		float azimuth = angleIncrement * j;

		float x = sin (inclination) * cos (azimuth);
		float y = sin (inclination) * sin (azimuth);
		float z = cos (inclination);
		float3 dir = float3(x, y, z);

		//float theta = PI * (float(i) + 0.5) / float(sqrtSamples);
		//float phi = safeacos(1.0 - 2.0*(float(j) + 0.5) / float(sqrtSamples));
		//float3 rayDir = getSphericalDir(theta, phi);

		float3 pos = origin;

		float cosTheta = dot(dir, dirToSun);
		float rayleighPhaseValue = getRayleighPhase(-cosTheta);
		float miePhase = getMiePhase(cosTheta);

		//float2 raySphere(float3 sphereCentre, float sphereRadius, float3 rayOrigin, float3 rayDir) {
		float dstThroughAtmosphere = raySphere(0, atmosphereRadius, pos, dir).y;
		float dstToGround = raySphere(0, planetRadius, pos, dir).x;
		float rayLength = min(dstThroughAtmosphere, dstToGround);
		tot += rayLength;
		float gd = rayIntersectSphere(pos, dir, planetRadius);
		
		if (gd > 0) {
			rayLength = gd;
			//tot += gd;
		}
	

		float stepSize = rayLength / multiScatteringStepCount;
		float scaledStepSize = stepSize / atmosphereThickness;

		float3 luminance = 0;
		float3 lumFactor = 0;
		float3 transmittance = 1;

		for (int i = 0; i < multiScatteringStepCount; i ++) {
			pos += dir * stepSize;

			ScatteringParameters scattering = getScatteringValues(pos);
			float3 sampleTransmittance = exp(-scattering.extinction * scaledStepSize);

			float3 inScatteringNoPhase = scattering.rayleigh + scattering.mie;
			lumFactor += inScatteringNoPhase * transmittance * scaledStepSize;

			// The proportion of light that reaches this point from the sun
			//float3 sunTransmittance = getSunTransmittance(pos, dirToSun);
			float3 sunTransmittance = getSunTransmittanceLUT(testTex, pos, dirToSun);

			float3 inScattering = (scattering.rayleigh * rayleighPhaseValue + scattering.mie * miePhase) * sunTransmittance;
			luminance += inScattering * transmittance * scaledStepSize;

			transmittance *= sampleTransmittance;
		}

		fms += lumFactor / (numSamples);
		luminanceTotal += luminance / numSamples;
	
	}


	MultiScatteringResult result;
	result.luminance = luminanceTotal;
	result.fms = fms;
	//result.fms = tot / (numSamples) / 1000;

	return result;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= size || id.y >= size) { return; }

	float2 uv = id.xy / (size - 1.0);

	float sunCosTheta = uv.x * 2 - 1;
	float sunTheta = acos(sunCosTheta);
	float height = planetRadius + 1 + atmosphereThickness * uv.y;
	float3 pos = float3(0, height, 0); 
	float3 sunDir = float3(0, sunCosTheta, -sin(sunTheta));

	// angle v2
	float theta = uv.x * PI;
	sunDir = float3(sin(theta), cos(theta), 100);
	
	
	//MultiScatteringResult result;
	MultiScatteringResult result = calculateMultiScattering(pos, sunDir);

	float3 psi =  (result.fms);
	//MultiScatteringLUT[id.xy] = psi * 2;
//	MultiScatteringLUT[id.xy] = result.  * 0.025;
	//MultiScatteringLUT[id.xy] = sunTheta / (PI);
}
